{"version":3,"names":["InputSelectDynamic","exports","Array","class_1","prototype","FetchData","strings","common","get","headers","Headers","append","this","loading","message","fetch","api","apiData","method","credentials","then","response","ok","status","json","data","_this","catch","error","Number","isInteger","inputConnectionError","navigator","onLine","inputInternetConnectionError","_a","sent","Validate","lightUp","IsValid","componentWillLoad","Decode","input","doc","DOMParser","parseFromString","documentElement","textContent","render","h","class","name","label","map","item","selected","selectedId","value","style","top","left","width","height","backgroundColor","onClick","inputRefresh"],"sources":["src/components/input/inputSelectDynamic.tsx"],"sourcesContent":["import { Component, h, Prop, State, Watch, Method } from '@stencil/core';\nimport { common } from '../../global/data/common';\n\n\ninterface SelectOption {\n    name: string;\n    value: string;\n}\n\n\n@Component({\n      tag: 'ks-input-select-dynamic'\n})\nexport class InputSelectDynamic {\n\n    @Prop() name: string;\n    @Prop() label: string;\n\n    @Prop() api: string;\n    @Prop({mutable: true, reflect: true}) apiData = \"\";\n    @Prop() selectedId: string;\n\n    @Prop({mutable: true}) lightUp: boolean = false;\n\n    @State() data = new Array<SelectOption>();\n\n    @State() loading: boolean = false;\n    @State() message: string = \"\";\n\n    @Watch('apiData')\n    async FetchData() {\n        const strings = common.get(\"translations\");\n\n        var headers = new Headers();\n        headers.append('pragma', 'no-cache');\n        headers.append('cache-control', 'no-cache');\n\n        this.loading = true;\n        this.message = \"\";\n        await fetch(this.api + this.apiData, {\n            method: 'GET',\n            headers: headers,\n            credentials: \"same-origin\"\n        })\n            .then(response => {\n                if(!response.ok)\n                    throw response.status;\n\n                return response.json()\n            })\n            .then(data => {\n                this.data = data;\n            })\n            .catch(error => {\n                let message = error;\n\n                if(Number.isInteger(error))\n                    message = strings.inputConnectionError + error;\n\n                else if(!navigator.onLine)\n                    message = strings.inputInternetConnectionError;\n\n                this.message = message;\n            });\n    \n        this.loading = false;\n    }\n\n    @Method()\n    async Validate() {\n        this.lightUp = false;\n    }\n\n    @Method()\n    async IsValid() {\n        return !this.loading && this.message == \"\";\n    }\n\n    componentWillLoad() {\n        this.FetchData();\n    }\n\n    Decode(input) {\n        var doc = new DOMParser().parseFromString(input, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n\trender() {            \n        const strings = common.get(\"translations\");\n\n        return(\n            <div class=\"uk-position-relative\">\n                <ks-input-select name={this.name} label={this.label} error={this.message != \"\"} light-up={this.lightUp}>\n                    {this.data.map( (item: SelectOption)=>\n                        <option selected={this.selectedId == item.value ? true : false} value={item.value}>{this.Decode(item.name)}</option>\n                    )}\n                </ks-input-select>\n\n                {this.loading ?\n                    <div class=\"uk-position-absolute uk-animation-fade\"\n                         style={{top: \"20px\", left: \"0px\", width: \"100%\", height: \"50px\", backgroundColor: \"rgba(255, 255, 255, 0.7)\"}}>\n\n                        <div uk-spinner class=\"uk-position-center\"></div>\n                    </div>\n                : null}\n\n                {this.message != \"\" ?\n                    <div class=\"uk-position-absolute\"\n                         style={{top: \"20px\", left: \"0px\", width: \"100%\", height: \"50px\", backgroundColor: \"rgba(255, 255, 255)\"}}>\n\n                        <p class=\"uk-position-center uk-text-danger\">\n                            {this.message} <a onClick={()=>this.FetchData()}>{strings.inputRefresh}</a>\n                        </p>\n                        \n                    </div>\n                : null}\n            </div>\n        );\n    }\n}\n"],"mappings":"6rDAaaA,EAAkBC,EAAA,qC,iGAMqB,G,uCAGN,M,UAE1B,IAAIC,M,aAEQ,M,aACD,E,CAGrBC,EAAAC,UAAAC,UAAN,W,+HACUC,EAAUC,EAAOC,IAAI,gBAEvBC,EAAU,IAAIC,QAClBD,EAAQE,OAAO,SAAU,YACzBF,EAAQE,OAAO,gBAAiB,YAEhCC,KAAKC,QAAU,KACfD,KAAKE,QAAU,GACf,SAAMC,MAAMH,KAAKI,IAAMJ,KAAKK,QAAS,CACjCC,OAAQ,MACRT,QAASA,EACTU,YAAa,gBAEZC,MAAK,SAAAC,GACF,IAAIA,EAASC,GACT,MAAMD,EAASE,OAEnB,OAAOF,EAASG,M,IAEnBJ,MAAK,SAAAK,GACFC,EAAKD,KAAOA,C,IAEfE,OAAM,SAAAC,GACH,IAAId,EAAUc,EAEd,GAAGC,OAAOC,UAAUF,GAChBd,EAAUR,EAAQyB,qBAAuBH,OAExC,IAAII,UAAUC,OACfnB,EAAUR,EAAQ4B,6BAEtBR,EAAKZ,QAAUA,C,YAvBvBqB,EAAAC,OA0BAxB,KAAKC,QAAU,M,kBAIbV,EAAAC,UAAAiC,SAAN,W,qFACIzB,KAAK0B,QAAU,M,iBAIbnC,EAAAC,UAAAmC,QAAN,W,qFACI,UAAQ3B,KAAKC,SAAWD,KAAKE,SAAW,G,QAG5CX,EAAAC,UAAAoC,kBAAA,WACI5B,KAAKP,W,EAGTF,EAAAC,UAAAqC,OAAA,SAAOC,GACH,IAAIC,GAAM,IAAIC,WAAYC,gBAAgBH,EAAO,aACjD,OAAOC,EAAIG,gBAAgBC,W,EAGlC5C,EAAAC,UAAA4C,OAAA,eAAAtB,EAAAd,KACO,IAAMN,EAAUC,EAAOC,IAAI,gBAE3B,OACIyC,EAAA,OAAKC,MAAM,wBACPD,EAAA,mBAAiBE,KAAMvC,KAAKuC,KAAMC,MAAOxC,KAAKwC,MAAOxB,MAAOhB,KAAKE,SAAW,GAAE,WAAYF,KAAK0B,SAC1F1B,KAAKa,KAAK4B,KAAK,SAACC,GACb,OAAAL,EAAA,UAAQM,SAAU7B,EAAK8B,YAAcF,EAAKG,MAAQ,KAAO,MAAOA,MAAOH,EAAKG,OAAQ/B,EAAKe,OAAOa,EAAKH,MAArG,KAIPvC,KAAKC,QACFoC,EAAA,OAAKC,MAAM,yCACNQ,MAAO,CAACC,IAAK,OAAQC,KAAM,MAAOC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,6BAEnFd,EAAA,yBAAgBC,MAAM,wBAE5B,KAEDtC,KAAKE,SAAW,GACbmC,EAAA,OAAKC,MAAM,uBACNQ,MAAO,CAACC,IAAK,OAAQC,KAAM,MAAOC,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,wBAEnFd,EAAA,KAAGC,MAAM,qCACJtC,KAAKE,QAAO,IAAEmC,EAAA,KAAGe,QAAS,WAAI,OAAAtC,EAAKrB,WAAL,GAAmBC,EAAQ2D,gBAIpE,K,kIAtGa,G"}